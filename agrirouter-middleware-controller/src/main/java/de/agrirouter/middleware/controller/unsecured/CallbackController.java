package de.agrirouter.middleware.controller.unsecured;


import de.agrirouter.middleware.api.Routes;
import de.agrirouter.middleware.controller.UnsecuredApiController;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.view.RedirectView;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * Callback for the secured onboard process.
 */
@Slf4j
@RestController
@RequestMapping(UnsecuredApiController.API_PREFIX + "/callback")
@Tag(
        name = "agrirouterÂ© callback",
        description = "The callback for the agrirouter. This callback has to be referenced within the newly created application."
)
public class CallbackController implements UnsecuredApiController {

    @Value("${app.agrirouter.redirect-delay:500}")
    private Long redirectDelay;

    /**
     * The landing page.
     *
     * @return -
     */
    @GetMapping()
    public RedirectView navigation(@Parameter(description = "The state to identify the request internally.") @RequestParam(value = "state", required = false) String state,
                                   @Parameter(description = "Token containing the information for the onboard process, generated by the agrirouter.") @RequestParam(value = "token", required = false) String token,
                                   @Parameter(description = "Signature from the agrirouter, used for validation.") @RequestParam(value = "signature", required = false) String signature,
                                   @Parameter(description = "Error information, in case the onboard process failed.") @RequestParam(value = "error", required = false) String error) {
        var redirectUrl = UriComponentsBuilder
                .fromUriString(Routes.UnsecuredEndpoints.LANDINGPAGE)
                .queryParam("state", state)
                .queryParam("token", token)
                .queryParam("signature", signature)
                .queryParam("error", error)
                .queryParam("redirectDelay", redirectDelay)
                .build().toUriString();
        return new RedirectView(redirectUrl);
    }

}
