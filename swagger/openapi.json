{
  "openapi": "3.0.1",
  "info": {
    "title": "Agrirouter© Middleware",
    "description": "Middleware to access the agrirouter© using a 'smaller' API. The middleware will handle the connection for all endpoints and fetches / stores messages from the agrirouter© within a custom database.",
    "contact": {
      "name": "Agrirouter© Middleware",
      "url": "https://github.com/agrirouter-middleware"
    },
    "license": {
      "name": "Apache License Version 2.0",
      "url": "https://github.com/agrirouter-middleware/LICENSE"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "agrirouter© callback",
      "description": "The callback for the agrirouter. This callback has to be referenced within the newly created application."
    },
    {
      "name": "non telemetry data management",
      "description": "Operations for non telemetry data management, i.e. publish images, task data or documents to the agrirouter."
    },
    {
      "name": "application management",
      "description": "Operations for the application management, i.e. register, add supported technical message types and status checks."
    },
    {
      "name": "endpoint management",
      "description": "Operations for the endpoint management, i.e. status checking or searching for endpoints."
    },
    {
      "name": "farming software management",
      "description": "Operations for farming software management, i.e. onboard process for endpoints or revoking endpoints."
    },
    {
      "name": "telemetry data management",
      "description": "Operations for telemetry data management, i.e. search for telemetry data, search for time log periods or fetch data from the internal storage."
    },
    {
      "name": "telemetry platform management",
      "description": "Operations for telemetry platform management, i.e. onboard process for (virtual) endpoints or revoking endpoints."
    },
    {
      "name": "maintenance",
      "description": "Maintenance operations for internal usage. Do NOT use this profile in production."
    }
  ],
  "paths": {
    "/unsecured/api/maintenance/endpoint/resend/capabilities-and-subscriptions/{externalEndpointId}": {
      "put": {
        "tags": [
          "maintenance"
        ],
        "description": "Resend the capabilities and subscriptions for the endpoint.",
        "operationId": "maintenance.resend-capabilities",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "In case the operation was successful.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secured/api/application": {
      "put": {
        "tags": [
          "application management"
        ],
        "description": "update an existing application within the middleware.",
        "operationId": "application.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The application has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      },
      "post": {
        "tags": [
          "application management"
        ],
        "description": "Register an application within the middleware.",
        "operationId": "application.register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The application has been registered and was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/application/supported-technical-message-types/{applicationId}": {
      "put": {
        "tags": [
          "application management"
        ],
        "description": "Define the technical types for the application.",
        "operationId": "application.define-technical-message-types",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSupportedTechnicalMessageTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "In case the supported technical message types were added."
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/application/router-device/{applicationId}": {
      "put": {
        "tags": [
          "application management"
        ],
        "description": "Add a router device to the application.",
        "operationId": "application.add-router-device",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRouterDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "In case the router device was added."
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/unsecured/api/maintenance/tenant/register": {
      "post": {
        "tags": [
          "maintenance"
        ],
        "description": "Register a new tenant within the middleware. Can be skipped if you only use the default tenant.",
        "operationId": "maintenance.tenant.register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "In case the tenant was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secured/api/telemetry-platform/{endpointId}/virtual": {
      "post": {
        "tags": [
          "telemetry platform management"
        ],
        "description": "Onboard a virtual endpoint for the given telemetry platform.",
        "operationId": "telemetry-platform.onboard.virtual",
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The ID of the existing endpoint.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardVirtualEndpointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The response if the endpoint was created successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      },
      "delete": {
        "tags": [
          "telemetry platform management"
        ],
        "description": "Revoke a virtual endpoint for the given telemetry platform.",
        "operationId": "telemetry-platform.revoke.virtual",
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The ID of the existing endpoint.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeVirtualEndpointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response if the endpoint was revoked successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/telemetry-data/search/time-periods": {
      "post": {
        "tags": [
          "telemetry data management"
        ],
        "description": "Search for the time periods with the machine data.",
        "operationId": "telemetry-data.search-time-periods",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTelemetryDataPeriodsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response containing the time log periods for the devices.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/telemetry-data/search/time-logs": {
      "post": {
        "tags": [
          "telemetry data management"
        ],
        "description": "Search for the time logs with the machine data and time log period data.",
        "operationId": "telemetry-data.search-time-logs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTelemetryDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response containing all time logs.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/telemetry-data/search/time-logs/raw": {
      "post": {
        "tags": [
          "telemetry data management"
        ],
        "description": "Search for the raw time logs with the machine data and time log period data.",
        "operationId": "telemetry-data.search-raw-time-logs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTelemetryDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response containing all time logs.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/telemetry-data/search/machines": {
      "post": {
        "tags": [
          "telemetry data management"
        ],
        "description": "Search machines within the middleware.",
        "operationId": "telemetry-data.search-machines",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchMachinesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response, containing all machines found.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/telemetry-data/register/machine/{externalEndpointId}": {
      "post": {
        "tags": [
          "telemetry data management"
        ],
        "description": "Register a new machine within the middleware and within the agrirouter.",
        "operationId": "telemetry-data.register-machine",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterMachineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The response if the machine was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterMachineResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/telemetry-data/publish/{externalEndpointId}/{teamSetContextId}": {
      "post": {
        "tags": [
          "telemetry data management"
        ],
        "description": "Publish a message for a given team set.",
        "operationId": "telemetry-data.publish-message",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamSetContextId",
            "in": "path",
            "description": "The team set context ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishTimeLogDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response if the message was published successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/non-telemetry-data/search/{externalEndpointId}": {
      "post": {
        "tags": [
          "non telemetry data management"
        ],
        "description": "Search for file headers for an existing endpoint.",
        "operationId": "non-telemetry-data.search-headers",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response containing the results for the search.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/non-telemetry-data/publish/video/{externalEndpointId}": {
      "post": {
        "tags": [
          "non telemetry data management"
        ],
        "description": "Publish video files for an existing endpoint.",
        "operationId": "non-telemetry-data.publish-video",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishVideoDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response if the message was published successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/non-telemetry-data/publish/taskdata/{externalEndpointId}": {
      "post": {
        "tags": [
          "non telemetry data management"
        ],
        "description": "Publish a task data file for an existing endpoint.",
        "operationId": "non-telemetry-data.publish-taskdata",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishNonTelemetryDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response if the message was published successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/non-telemetry-data/publish/shape/{externalEndpointId}": {
      "post": {
        "tags": [
          "non telemetry data management"
        ],
        "description": "Publish a shape file for an existing endpoint.",
        "operationId": "non-telemetry-data.publish-shape",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishNonTelemetryDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response if the message was published successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/non-telemetry-data/publish/pdf/{externalEndpointId}": {
      "post": {
        "tags": [
          "non telemetry data management"
        ],
        "description": "Publish PDF files for an existing endpoint.",
        "operationId": "non-telemetry-data.publish-PDF",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishNonTelemetryDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response if the message was published successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/non-telemetry-data/publish/image/{externalEndpointId}": {
      "post": {
        "tags": [
          "non telemetry data management"
        ],
        "description": "Publish image files for an existing endpoint.",
        "operationId": "non-telemetry-data.publish-image",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishImageDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response if the message was published successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/status": {
      "post": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the status of an existing endpoint.",
        "operationId": "endpoint.status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The status information for this endpoint.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/status/warnings": {
      "post": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the warnings of an existing endpoint.",
        "operationId": "endpoint.status.warnings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The status information for this endpoint.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/status/technical-connection-state": {
      "post": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the technical connection state of an existing endpoint.",
        "operationId": "endpoint.status.technical-connection-state",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The status information for this endpoint.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/status/missing-acknowledgements": {
      "post": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the missing acknowledgements of an existing endpoint.",
        "operationId": "endpoint.status.missing-acknowledgements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The status information for this endpoint.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/status/errors": {
      "post": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the errors of an existing endpoint.",
        "operationId": "endpoint.status.errors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The status information for this endpoint.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/status/connection": {
      "post": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the connection status of an existing endpoint.",
        "operationId": "endpoint.status.connection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The status information for this endpoint.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/health": {
      "post": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the health status of multiple existing endpoints.",
        "operationId": "endpoint.health-for-multiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointHealthStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A wrapper object with a status for each of the given IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointHealthStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of an business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/unsecured/api/telemetry-platform/{applicationId}/{externalEndpointId}": {
      "get": {
        "tags": [
          "telemetry platform management"
        ],
        "description": "Create an authorization URL for the telemetry platform.",
        "operationId": "telemetry-platform.auth-url",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The redirect URL for this onboard request.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The URL (as redirect) to authorize the creation of an endpoint within the account of the user.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unsecured/api/maintenance/tenant/": {
      "get": {
        "tags": [
          "maintenance"
        ],
        "description": "Find all tenants within the middleware.",
        "operationId": "maintenance.tenant.find-all",
        "responses": {
          "200": {
            "description": "In case there are tenants.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unsecured/api/farming-software/{applicationId}/{externalEndpointId}": {
      "get": {
        "tags": [
          "farming software management"
        ],
        "description": "Create an authorization URL for the telemetry platform.",
        "operationId": "onboard.farming-software.auth-url",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The redirect URL for this onboard request.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The URL (as redirect) to authorize the creation of an endpoint within the account of the user.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unsecured/api/callback": {
      "get": {
        "tags": [
          "agrirouter© callback"
        ],
        "description": "The callback for the onboard process. Used by the agrirouter© to send the onboard process data.",
        "operationId": "callback.callback",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "The state to identify the request internally.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Token containing the information for the onboard process, generated by the agrirouter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signature",
            "in": "query",
            "description": "Signature from the agrirouter, used for validation.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error",
            "in": "query",
            "description": "Error information, in case the onboard process failed.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "In case of a successful response, the callback redirects to an internal page to show the result of the onboard process.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secured/api/non-telemetry-data/download/{externalEndpointId}/{messageId}": {
      "get": {
        "tags": [
          "non telemetry data management"
        ],
        "description": "Download a file for an existing endpoint.",
        "operationId": "non-telemetry-data.download",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing the result.",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/recipients/{externalEndpointId}": {
      "get": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the recipients of an existing endpoint.",
        "operationId": "endpoint.recipients",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response with all the recipients available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointRecipientsResponse"
                }
              }
            }
          },
          "404": {
            "description": "In case that the endpoint was not found.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointRecipientsResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of an business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/endpoint/health/{externalEndpointId}": {
      "get": {
        "tags": [
          "endpoint management"
        ],
        "description": "Fetch the health status of an existing endpoint.",
        "operationId": "endpoint.health",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The endpoint is connected and is able to communicate."
          },
          "404": {
            "description": "In case that the endpoint was not found."
          },
          "400": {
            "description": "In case of an business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "In case the endpoint is currently not connected."
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/application/{applicationId}": {
      "get": {
        "tags": [
          "application management"
        ],
        "description": "Find a specific application by the given ID.",
        "operationId": "application.find",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A container holding the application that has been found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/application/{applicationId}/endpoints": {
      "get": {
        "tags": [
          "application management"
        ],
        "description": "Fetch all endpoints for an application.",
        "operationId": "application.endpoints",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The endpoints for the application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindEndpointsForApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/application/status/{applicationId}": {
      "get": {
        "tags": [
          "application management"
        ],
        "description": "Show the status of an application",
        "operationId": "application.status",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A container holding the status of the application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/application/all": {
      "get": {
        "tags": [
          "application management"
        ],
        "description": "Search for all applications.",
        "operationId": "application.all",
        "responses": {
          "200": {
            "description": "All applications registered for the current tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/unsecured/api/maintenance/endpoint/{externalEndpointId}": {
      "delete": {
        "tags": [
          "maintenance"
        ],
        "description": "Delete the endpoint.",
        "operationId": "maintenance.delete-endpoint",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "In case the operation was successful.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unsecured/api/maintenance/endpoint/reset/warnings/{externalEndpointId}": {
      "delete": {
        "tags": [
          "maintenance"
        ],
        "description": "Reset the warnings for the endpoint.",
        "operationId": "maintenance.reset-warnings",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "In case the operation was successful.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unsecured/api/maintenance/endpoint/reset/errors/{externalEndpointId}": {
      "delete": {
        "tags": [
          "maintenance"
        ],
        "description": "Reset the errors for the endpoint.",
        "operationId": "maintenance.reset-errors",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "In case the operation was successful.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unsecured/api/maintenance/application/{internalApplicationId}": {
      "delete": {
        "tags": [
          "maintenance"
        ],
        "description": "Delete the application incl. all endpoints and other data. Handle with care, the data is lost forever.",
        "operationId": "maintenance.delete",
        "parameters": [
          {
            "name": "internalApplicationId",
            "in": "path",
            "description": "The internal application ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "In case the operation was successful.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a parameter validation exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterValidationProblemResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secured/api/telemetry-platform/{externalEndpointId}": {
      "delete": {
        "tags": [
          "telemetry platform management"
        ],
        "description": "Revoke a telemetry platform from the middleware and remove all of its data, incl. virtual endpoints, messages, logs, etc.",
        "operationId": "telemetry-platform.revoke-process",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The revoke process was successful.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    },
    "/secured/api/farming-software/{externalEndpointId}": {
      "delete": {
        "tags": [
          "farming software management"
        ],
        "description": "Revoke a farming software from the middleware and remove all of its data, incl. virtual endpoints, messages, logs, etc.",
        "operationId": "farming-software.revoke",
        "parameters": [
          {
            "name": "externalEndpointId",
            "in": "path",
            "description": "The external endpoint id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The revoke process was successful.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "In case of a business exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "In case of an unknown error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "secured-api": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "key": {
            "type": "string",
            "description": "The key of the error."
          },
          "errorMessage": {
            "type": "string",
            "description": "The message of the error."
          }
        },
        "description": "Generic error response to map the internal errors and provide clean API description."
      },
      "ObjectError": {
        "type": "object",
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "defaultMessage": {
            "type": "string"
          },
          "objectName": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "description": "The validation errors."
      },
      "ParameterValidationProblemResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "errors": {
            "type": "array",
            "description": "The validation errors.",
            "items": {
              "$ref": "#/components/schemas/ObjectError"
            }
          }
        },
        "description": "Generic error response to map parameter validation errors and provide clean API description without publishing internals."
      },
      "ApplicationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The technical ID of the entity.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of the application."
          },
          "applicationId": {
            "type": "string",
            "description": "The agrirouter© ID of the application."
          },
          "internalApplicationId": {
            "type": "string",
            "description": "The internal ID of the application."
          },
          "versionId": {
            "type": "string",
            "description": "The version of the application. Each agrirouter© version creates a new application in the middleware."
          }
        },
        "description": "A container holding the basic representation of an application."
      },
      "UpdateApplicationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationDto"
          }
        },
        "description": "The response after an application has been successfully updated."
      },
      "UpdateApplicationRequest": {
        "required": [
          "internalApplicationId"
        ],
        "type": "object",
        "properties": {
          "internalApplicationId": {
            "type": "string",
            "description": "The internal ID of the application."
          },
          "name": {
            "type": "string",
            "description": "The name of the application."
          },
          "privateKey": {
            "type": "string",
            "description": "The private key of the application. Only needed if the application is an instance of a farming software or telemetry platform."
          },
          "publicKey": {
            "type": "string",
            "description": "The public key of the application. Only needed if the application is an instance of a farming software or telemetry platform."
          },
          "redirectUrl": {
            "type": "string",
            "description": "The redirect URL for the application. To configure a custom redirect URL that matches the location of the service."
          }
        },
        "description": "The request parameters to update the existing application."
      },
      "AddSupportedTechnicalMessageTypeRequest": {
        "required": [
          "supportedTechnicalMessageTypes"
        ],
        "type": "object",
        "properties": {
          "supportedTechnicalMessageTypes": {
            "type": "array",
            "description": "The list of supported technical message types.",
            "items": {
              "$ref": "#/components/schemas/SupportedTechnicalMessageTypeDto"
            }
          }
        },
        "description": "The container holding the parameters to add the supported technical messages types."
      },
      "SupportedTechnicalMessageTypeDto": {
        "type": "object",
        "properties": {
          "technicalMessageType": {
            "type": "string",
            "description": "The technical message type, that the application does support, i.e. TaskData, EFDI, etc.",
            "enum": [
              "ISO_11783_TASKDATA_ZIP",
              "SHP_SHAPE_ZIP",
              "DOC_PDF",
              "IMG_JPEG",
              "IMG_PNG",
              "IMG_BMP",
              "VID_AVI",
              "VID_MP4",
              "VID_WMV",
              "GPS_INFO",
              "ISO_11783_DEVICE_DESCRIPTION",
              "ISO_11783_TIME_LOG"
            ]
          },
          "direction": {
            "type": "string",
            "description": "The direction the message type can be handled, i.e. SEND, RECEIVE, SEND_RECEIVE.",
            "enum": [
              "SEND",
              "RECEIVE",
              "SEND_RECEIVE",
              "UNRECOGNIZED"
            ]
          }
        },
        "description": "Representation of a technical message type to add."
      },
      "AddRouterDeviceRequest": {
        "required": [
          "routerDevice"
        ],
        "type": "object",
        "properties": {
          "routerDevice": {
            "$ref": "#/components/schemas/RouterDevice"
          }
        },
        "description": "The container holding the parameters to add a router device."
      },
      "Authentication": {
        "required": [
          "certificate",
          "secret",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the certificate.",
            "enum": [
              "PEM",
              "P12"
            ]
          },
          "secret": {
            "type": "string",
            "description": "The secret for the certificate."
          },
          "certificate": {
            "type": "string",
            "description": "The certificate."
          }
        },
        "description": "The authentication details for a router device."
      },
      "ConnectionCriteria": {
        "required": [
          "clientId",
          "host",
          "port"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client ID."
          },
          "host": {
            "type": "string",
            "description": "The host."
          },
          "port": {
            "type": "string",
            "description": "The port."
          }
        },
        "description": "Connection details for a router device."
      },
      "RouterDevice": {
        "required": [
          "authentication",
          "connectionCriteria",
          "deviceAlternateId"
        ],
        "type": "object",
        "properties": {
          "deviceAlternateId": {
            "type": "string",
            "description": "The device alternate ID."
          },
          "authentication": {
            "$ref": "#/components/schemas/Authentication"
          },
          "connectionCriteria": {
            "$ref": "#/components/schemas/ConnectionCriteria"
          }
        },
        "description": "A router device from the AR."
      },
      "TenantRegistrationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "tenantId": {
            "type": "string",
            "description": "Internal ID of the tenant."
          },
          "accessToken": {
            "type": "string",
            "description": "Access token for API usage. Will be shown only once, therefore better save this one."
          }
        },
        "description": "The response after the tenant was registered."
      },
      "TenantRegistrationRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tenant, has to be unique."
          }
        },
        "description": "The request holding information to register a new tenant."
      },
      "OnboardVirtualEndpointRequest": {
        "required": [
          "endpointName",
          "externalVirtualEndpointId"
        ],
        "type": "object",
        "properties": {
          "externalVirtualEndpointId": {
            "type": "string",
            "description": "The ID of the new virtual endpoint within the middleware."
          },
          "endpointName": {
            "type": "string",
            "description": "The list of names for the virtual endpoints."
          }
        },
        "description": "Necessary information to create the virtual endpoint."
      },
      "SearchTelemetryDataPeriodsRequest": {
        "required": [
          "externalEndpointId"
        ],
        "type": "object",
        "properties": {
          "externalEndpointId": {
            "type": "string",
            "description": "The ID of the endpoint within the middleware."
          },
          "internalDeviceIds": {
            "type": "array",
            "description": "The list of internal device IDs to search for.",
            "items": {
              "type": "string",
              "description": "The list of internal device IDs to search for."
            }
          },
          "filterEmptyEntries": {
            "type": "boolean",
            "description": "Filter empty entries, like machines and time periods."
          },
          "sendFrom": {
            "type": "integer",
            "description": "The beginning of the time interval. Default value would be 4 weeks ago.",
            "format": "int64"
          },
          "sendTo": {
            "type": "integer",
            "description": "The end of the time interval.",
            "format": "int64"
          }
        },
        "description": "The request with all necessary information to search for the time log periods."
      },
      "SearchTelemetryDataRequest": {
        "required": [
          "internalDeviceId",
          "teamSetContextId"
        ],
        "type": "object",
        "properties": {
          "internalDeviceId": {
            "type": "string",
            "description": "The ID of the device."
          },
          "teamSetContextId": {
            "type": "string",
            "description": "The team set context ID."
          },
          "sendFrom": {
            "type": "integer",
            "description": "The beginning of the time interval. Default value would be 4 weeks ago.",
            "format": "int64"
          },
          "sendTo": {
            "type": "integer",
            "description": "The end of the time interval.",
            "format": "int64"
          },
          "ddisToList": {
            "uniqueItems": true,
            "type": "array",
            "description": "The DDIs to list, if null or empty all DDIs will be listed and no filter will be applied.",
            "items": {
              "type": "integer",
              "description": "The DDIs to list, if null or empty all DDIs will be listed and no filter will be applied.",
              "format": "int32"
            }
          }
        },
        "description": "The request with all necessary information to search for the telemetry data (time logs)."
      },
      "SearchMachinesRequest": {
        "required": [
          "externalEndpointId"
        ],
        "type": "object",
        "properties": {
          "externalEndpointId": {
            "type": "string",
            "description": "The ID of the endpoint within the middleware."
          },
          "internalDeviceIds": {
            "type": "array",
            "description": "The list of internal device IDs to search for.",
            "items": {
              "type": "string",
              "description": "The list of internal device IDs to search for."
            }
          },
          "withCurrentDeviceDescription": {
            "type": "boolean",
            "description": "Show the current device description."
          }
        },
        "description": "The request for searching for machines."
      },
      "RegisterMachineResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "teamSetContextId": {
            "type": "string",
            "description": "The team set context ID, provided by the agrirouter."
          }
        },
        "description": "The response when registering a machine."
      },
      "RegisterMachineRequest": {
        "required": [
          "base64EncodedDeviceDescription"
        ],
        "type": "object",
        "properties": {
          "customTeamSetContextId": {
            "type": "string",
            "description": "Your custom team set context ID, in case you want to define it by your own. If the field is empty, a unique ID will be generated."
          },
          "base64EncodedDeviceDescription": {
            "type": "string",
            "description": "The device description itself, should be Base64 encoded."
          }
        },
        "description": "The request the information to register a machine."
      },
      "PublishTimeLogDataRequest": {
        "required": [
          "base64EncodedMessages"
        ],
        "type": "object",
        "properties": {
          "base64EncodedMessages": {
            "type": "array",
            "description": "The Base64 encoded messages.",
            "items": {
              "type": "string",
              "description": "The Base64 encoded messages."
            }
          }
        },
        "description": "The request body containing all necessary information to publish a time log."
      },
      "SearchFilesRequest": {
        "type": "object",
        "properties": {
          "technicalMessageTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ISO_11783_TASKDATA_ZIP",
                "SHP_SHAPE_ZIP",
                "DOC_PDF",
                "IMG_JPEG",
                "IMG_PNG",
                "IMG_BMP",
                "VID_AVI",
                "VID_MP4",
                "VID_WMV",
                "GPS_INFO",
                "ISO_11783_DEVICE_DESCRIPTION",
                "ISO_11783_TIME_LOG"
              ]
            }
          },
          "sendFrom": {
            "type": "integer",
            "description": "The beginning of the time interval. Default value would be 4 weeks ago.",
            "format": "int64"
          },
          "sendTo": {
            "type": "integer",
            "description": "The end of the time interval.",
            "format": "int64"
          }
        },
        "description": "The request body containing all necessary information to search for file headers."
      },
      "PublishNonTelemetryDataMessageTuple": {
        "required": [
          "fileName",
          "messageContent"
        ],
        "type": "object",
        "properties": {
          "messageContent": {
            "type": "string",
            "description": "The Base64 encoded message content."
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file."
          },
          "recipients": {
            "type": "array",
            "description": "The recipients for direct sending. If there is a recipient, the file will not be published.",
            "items": {
              "type": "string",
              "description": "The recipients for direct sending. If there is a recipient, the file will not be published."
            }
          }
        },
        "description": "Internal class to encapsulate the message tuples."
      },
      "PublishVideoDataRequest": {
        "required": [
          "messageTuples",
          "videoType"
        ],
        "type": "object",
        "properties": {
          "messageTuples": {
            "type": "array",
            "description": "The message tuples.",
            "items": {
              "$ref": "#/components/schemas/PublishNonTelemetryDataMessageTuple"
            }
          },
          "videoType": {
            "type": "string",
            "description": "The video type, used to map the specific agrirouter© message type.",
            "enum": [
              "AVI",
              "MP4",
              "WMV"
            ]
          }
        },
        "description": "The request body containing all necessary information to publish video files."
      },
      "PublishNonTelemetryDataRequest": {
        "required": [
          "messageTuples"
        ],
        "type": "object",
        "properties": {
          "messageTuples": {
            "type": "array",
            "description": "The message tuples.",
            "items": {
              "$ref": "#/components/schemas/PublishNonTelemetryDataMessageTuple"
            }
          }
        },
        "description": "The request body containing all necessary information to publish PDF files."
      },
      "PublishImageDataRequest": {
        "required": [
          "imageType",
          "messageTuples"
        ],
        "type": "object",
        "properties": {
          "messageTuples": {
            "type": "array",
            "description": "The message tuples.",
            "items": {
              "$ref": "#/components/schemas/PublishNonTelemetryDataMessageTuple"
            }
          },
          "imageType": {
            "type": "string",
            "description": "The image type, used to map the specific agrirouter© message type.",
            "enum": [
              "JPEG",
              "PNG",
              "BMP"
            ]
          }
        },
        "description": "The request body containing all necessary information to publish image files."
      },
      "EndpointStatusRequest": {
        "required": [
          "externalEndpointIds"
        ],
        "type": "object",
        "properties": {
          "externalEndpointIds": {
            "type": "array",
            "description": "The list of external endpoint IDs.",
            "items": {
              "type": "string",
              "description": "The list of external endpoint IDs."
            }
          }
        },
        "description": "The to search for one or multiple endpoints."
      },
      "EndpointHealthStatusResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "endpointStatus": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The status for each of the endpoints. This would be either a HTTP 200, if the endpoint is connected, a HTTP 503 if the endpoints has some problems or a HTTP 404 otherwise.",
              "format": "int32"
            },
            "description": "The status for each of the endpoints. This would be either a HTTP 200, if the endpoint is connected, a HTTP 503 if the endpoints has some problems or a HTTP 404 otherwise."
          }
        },
        "description": "The response when asking for an endpoint health status."
      },
      "EndpointHealthStatusRequest": {
        "type": "object",
        "properties": {
          "externalEndpointIds": {
            "type": "array",
            "description": "The IDs of the endpoints for the status check.",
            "items": {
              "type": "string",
              "description": "The IDs of the endpoints for the status check."
            }
          }
        },
        "description": "The external endpoint id."
      },
      "RegisterApplicationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationDto"
          }
        },
        "description": "The response after an application has been successfully registered."
      },
      "ApplicationRegistrationRequest": {
        "required": [
          "applicationId",
          "applicationType",
          "name",
          "privateKey",
          "publicKey",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the application."
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application."
          },
          "versionId": {
            "type": "string",
            "description": "The version of the application. Each agrirouter© version creates a new application in the middleware."
          },
          "privateKey": {
            "type": "string",
            "description": "The private key of the application. Only needed if the application is an instance of a farming software or telemetry platform."
          },
          "publicKey": {
            "type": "string",
            "description": "The public key of the application. Only needed if the application is an instance of a farming software or telemetry platform."
          },
          "applicationType": {
            "type": "string",
            "description": "The type of the application.",
            "enum": [
              "FARMING_SOFTWARE",
              "TELEMETRY_PLATFORM"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "description": "The redirect URL for the application. To configure a custom redirect URL that matches the location of the service."
          }
        },
        "description": "The request parameters to register an application."
      },
      "FindTenantResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "tenants": {
            "type": "array",
            "description": "The tenants found for the request.",
            "items": {
              "$ref": "#/components/schemas/TenantDto"
            }
          }
        },
        "description": "The response when searching for tenants."
      },
      "TenantDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Internal ID of the tenant."
          },
          "name": {
            "type": "string",
            "description": "Name of the tenant."
          }
        },
        "description": "Representation of a tenant within the middleware."
      },
      "EndpointRecipientsResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "messageRecipients": {
            "type": "array",
            "description": "The message recipients for this endpoint.",
            "items": {
              "$ref": "#/components/schemas/MessageRecipientDto"
            }
          }
        },
        "description": "The response when asking for the recipients of an endpoint."
      },
      "MessageRecipientDto": {
        "type": "object",
        "properties": {
          "agrirouterEndpointId": {
            "type": "string"
          },
          "endpointName": {
            "type": "string"
          },
          "endpointType": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "technicalMessageType": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          }
        },
        "description": "The status of an endpoint."
      },
      "FindApplicationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationDto"
          }
        },
        "description": "The response when searching for an application."
      },
      "EndpointDto": {
        "type": "object",
        "properties": {
          "agrirouterEndpointId": {
            "type": "string",
            "description": "The ID of an endpoint."
          },
          "externalEndpointId": {
            "type": "string",
            "description": "The external ID of an endpoint."
          },
          "endpointType": {
            "type": "string",
            "description": "The type of the endpoint.",
            "enum": [
              "NON_VIRTUAL",
              "VIRTUAL"
            ]
          },
          "deactivated": {
            "type": "boolean",
            "description": "Marks an endpoint as deactivated."
          },
          "agrirouterAccountId": {
            "type": "string",
            "description": "The account ID for this endpoint."
          }
        },
        "description": "Representation of an endpoint."
      },
      "EndpointWithChildrenDto": {
        "type": "object",
        "properties": {
          "agrirouterEndpointId": {
            "type": "string",
            "description": "The ID of an endpoint."
          },
          "externalEndpointId": {
            "type": "string",
            "description": "The external ID of an endpoint."
          },
          "endpointType": {
            "type": "string",
            "description": "The type of the endpoint.",
            "enum": [
              "NON_VIRTUAL",
              "VIRTUAL"
            ]
          },
          "connectedVirtualEndpoints": {
            "type": "array",
            "description": "All the children of the endpoint.",
            "items": {
              "$ref": "#/components/schemas/EndpointDto"
            }
          },
          "deactivated": {
            "type": "boolean",
            "description": "Marks an endpoint as deactivated."
          },
          "agrirouterAccountId": {
            "type": "string",
            "description": "The account ID for this endpoint."
          }
        },
        "description": "Representation of an endpoint with all children."
      },
      "FindEndpointsForApplicationResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "endpoints": {
            "type": "array",
            "description": "The endpoints for this application.",
            "items": {
              "$ref": "#/components/schemas/EndpointWithChildrenDto"
            }
          }
        },
        "description": "The response when searching for endpoints belonging to the application."
      },
      "ApplicationStatusResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp (UTC) of the response.",
            "format": "date-time"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationWithEndpointStatusDto"
          }
        },
        "description": "Response class to show the current status of an application."
      },
      "ApplicationWithEndpointStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The technical ID of the entity.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of the application."
          },
          "applicationId": {
            "type": "string",
            "description": "The agrirouter© ID of the application."
          },
          "internalApplicationId": {
            "type": "string",
            "description": "The internal ID of the application."
          },
          "versionId": {
            "type": "string",
            "description": "The version of the application. Each agrirouter© version creates a new application in the middleware."
          },
          "endpointsWithStatus": {
            "type": "array",
            "description": "The status information for all endpoints within the application.",
            "items": {
              "$ref": "#/components/schemas/EndpointWithStatusDto"
            }
          }
        },
        "description": "The current status of the application incl. its endpoints."
      },
      "ConnectionStateDto": {
        "type": "object",
        "properties": {
          "cached": {
            "type": "boolean",
            "description": "Is the connection available and cached?"
          },
          "connected": {
            "type": "boolean",
            "description": "Is the connection still connected to the AR?"
          },
          "clientId": {
            "type": "string",
            "description": "The client ID of the connection."
          }
        },
        "description": "The current status of the connection."
      },
      "EndpointStatusDto": {
        "type": "object",
        "properties": {
          "lastUpdate": {
            "type": "string",
            "description": "The last update.",
            "format": "date-time"
          },
          "nrOfMessagesWithinTheInbox": {
            "type": "integer",
            "description": "The number of messages within the inbox.",
            "format": "int32"
          },
          "connectionState": {
            "$ref": "#/components/schemas/ConnectionStateDto"
          }
        },
        "description": "The connection status of an endpoint."
      },
      "EndpointWithStatusDto": {
        "type": "object",
        "properties": {
          "agrirouterEndpointId": {
            "type": "string",
            "description": "The ID of an endpoint."
          },
          "externalEndpointId": {
            "type": "string",
            "description": "The external ID of an endpoint."
          },
          "deactivated": {
            "type": "boolean",
            "description": "The current status of an endpoint, could be active or deactivated."
          },
          "internalApplicationId": {
            "type": "string",
            "description": "The internal ID of the application."
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application."
          },
          "versionId": {
            "type": "string",
            "description": "The ID of the application version."
          },
          "agrirouterAccountId": {
            "type": "string",
            "description": "The account ID for this endpoint."
          },
          "endpointType": {
            "type": "string",
            "description": "The type of the endpoint.",
            "enum": [
              "NON_VIRTUAL",
              "VIRTUAL"
            ]
          },
          "endpointStatus": {
            "$ref": "#/components/schemas/EndpointStatusDto"
          },
          "nrOfMessagesCached": {
            "type": "integer",
            "description": "Nr. of messages that are cached.",
            "format": "int64"
          }
        },
        "description": "The status of an endpoint."
      },
      "RevokeVirtualEndpointRequest": {
        "required": [
          "externalEndpointIds"
        ],
        "type": "object",
        "properties": {
          "externalEndpointIds": {
            "type": "array",
            "description": "The list of endpoint IDs for the virtual endpoints.",
            "items": {
              "type": "string",
              "description": "The list of endpoint IDs for the virtual endpoints."
            }
          }
        },
        "description": "The necessary information to revoke the virtual endpoint."
      }
    },
    "securitySchemes": {
      "secured": {
        "type": "http",
        "description": "Default security scheme, used for the private flows.",
        "scheme": "basic"
      }
    }
  }
}